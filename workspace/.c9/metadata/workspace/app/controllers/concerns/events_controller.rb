{"filter":false,"title":"events_controller.rb","tooltip":"/app/controllers/concerns/events_controller.rb","undoManager":{"mark":0,"position":0,"stack":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":46}},"text":"class EventsController < ApplicationController"},{"action":"insertText","range":{"start":{"row":0,"column":46},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":73,"column":0}},"lines":["  before_action :set_event, only: [:show, :edit, :update, :destroy]","","  # GET /events","  # GET /events.json","  def index","    @events = Event.all","  end","","  # GET /events/1","  # GET /events/1.json","  def show","  end","","  # GET /events/new","  def new","    @event = Event.new","  end","","  # GET /events/1/edit","  def edit","  end","","  # POST /events","  # POST /events.json","  def create","    @event = Event.new(event_params)","","    respond_to do |format|","      if @event.save","        format.html { redirect_to @event, notice: 'Event was successfully created.' }","        format.json { render action: 'show', status: :created, location: @event }","      else","        format.html { render action: 'new' }","        format.json { render json: @event.errors, status: :unprocessable_entity }","      end","    end","  end","","  # PATCH/PUT /events/1","  # PATCH/PUT /events/1.json","  def update","    respond_to do |format|","      if @event.update(event_params)","        format.html { redirect_to @event, notice: 'Event was successfully updated.' }","        format.json { head :no_content }","      else","        format.html { render action: 'edit' }","        format.json { render json: @event.errors, status: :unprocessable_entity }","      end","    end","  end","","  # DELETE /events/1","  # DELETE /events/1.json","  def destroy","    @event.destroy","    respond_to do |format|","      format.html { redirect_to events_url }","      format.json { head :no_content }","    end","  end","","  private","    # Use callbacks to share common setup or constraints between actions.","    def set_event","      @event = Event.find(params[:id])","    end","","    # Never trust parameters from the scary internet, only allow the white list through.","    def event_params","      params.require(:event).permit(:event_name)","    end"]},{"action":"insertText","range":{"start":{"row":73,"column":0},"end":{"row":73,"column":3}},"text":"end"}]}]]},"ace":{"folds":[],"scrolltop":326,"scrollleft":0,"selection":{"start":{"row":73,"column":3},"end":{"row":73,"column":3},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1415862550815,"hash":"cbfa8aac574699e565208250794fabd7cb07eaec"}